#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "Cube_001"
    {
        matrix4d xformOp:transform = ( (-0.6575301289558411, -8.413200589529879e-7, -0.26271840929985046, 0), (-0.000006807423233112786, 4.980921268463135, 0.0000010868546951314784, 0), (-0.03633744269609451, -6.950692466034525e-8, 0.09094514697790146, 0), (-0.9140322804450989, -0.0015939967706799507, -2.2089412212371826, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Cube_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/Material_003>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -1, -1), (-1, -1, 1), (-1, 1, -1), (-1, 1, 1), (1, -1, -1), (1, -1, 1), (1, 1, -1), (1, 1, 1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Scope "_materials"
    {
        def Material "Material_003"
        {
            token outputs:surface.connect = </root/_materials/Material_003/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float inputs:opacity = 1
                float inputs:roughness = 0.2
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "Material_001"
        {
            token outputs:surface.connect = </root/_materials/Material_001/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float inputs:opacity = 1
                float inputs:roughness = 0.05
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "Material_002"
        {
            token outputs:surface.connect = </root/_materials/Material_002/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float inputs:opacity = 1
                float inputs:roughness = 0.1
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "Material_004"
        {
            token outputs:surface.connect = </root/_materials/Material_004/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float inputs:opacity = 1
                float inputs:roughness = 0.3
                float inputs:specular = 0.5
                token outputs:surface
            }
        }
    }

    def Xform "Point_001"
    {
        matrix4d xformOp:transform = ( (-0.258092999458313, -8.409737972669973e-8, 0, 0), (8.409737972669973e-8, -0.258092999458313, 0, 0), (0, 0, 0.258092999458313, 0), (1.0379879474639893, -2.770081043243408, 1.3940430879592896, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SphereLight "Point_002"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 318.30988
            bool inputs:normalize = 1
            float inputs:radius = 0.5
            float inputs:specular = 1
        }
    }

    def Xform "Point"
    {
        matrix4d xformOp:transform = ( (-0.258092999458313, -8.409737972669973e-8, 0, 0), (8.409737972669973e-8, -0.258092999458313, 0, 0), (0, 0, 0.258092999458313, 0), (1.0379879474639893, -0.0015940256416797638, 1.3940430879592896, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SphereLight "Point"
        {
            float3[] extent = [(-0.3, -0.3, -0.3), (0.3, 0.3, 0.3)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 318.30988
            bool inputs:normalize = 1
            float inputs:radius = 0.3
            float inputs:specular = 1
        }
    }

    def Xform "Cube_003"
    {
        matrix4d xformOp:transform = ( (-0.1931774765253067, 0, -0.9252586364746094, 0), (-0.000004926293513562996, 4.833859443664551, 0.000001028522092383355, 0), (-0.09303811937570572, -9.895030217421663e-8, 0.019424697384238243, 0), (2.0439372062683105, -0.0015938542783260345, 1.0841882228851318, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Cube_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/Material_001>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -1, -1), (-1, -1, 1), (-1, 1, -1), (-1, 1, 1), (1, -1, -1), (1, -1, 1), (1, 1, -1), (1, 1, 1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Point_002"
    {
        matrix4d xformOp:transform = ( (-0.258092999458313, -8.409737972669973e-8, 0, 0), (8.409737972669973e-8, -0.258092999458313, 0, 0), (0, 0, 0.258092999458313, 0), (1.0379879474639893, 2.6318747997283936, 1.3940430879592896, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SphereLight "Point_003"
        {
            float3[] extent = [(-0.04, -0.04, -0.04), (0.04, 0.04, 0.04)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 318.30988
            bool inputs:normalize = 1
            float inputs:radius = 0.04
            float inputs:specular = 1
        }
    }

    def Xform "Cube_002"
    {
        matrix4d xformOp:transform = ( (-0.6620966196060181, -8.471629371342715e-7, -0.5703690648078918, 0), (-0.000007806608664395753, 5.020255088806152, 0.0000016055479363785707, 0), (-0.06442499160766602, -1.2409988414674444e-7, 0.07478591799736023, 0), (0.9824023246765137, -0.0015939092263579369, -0.7577218413352966, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Cube_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/Material_002>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -1, -1), (-1, -1, 1), (-1, 1, -1), (-1, 1, 1), (1, -1, -1), (1, -1, 1), (1, 1, -1), (1, 1, 1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Plane"
    {
        matrix4d xformOp:transform = ( (-6.152664661407471, -0.000002004792577281478, 0, 0), (0.000003688623337438912, -11.320303916931152, 0, 0), (0, 0, 6.152664661407471, 0), (0.08569090068340302, -0.0015940256416797638, -3.1886332035064697, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Plane"
        {
            float3[] extent = [(-1, -1, 0), (1, 1, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [4, 0, 1, 63, 62, 5, 61, 64, 64, 61, 60, 65, 65, 60, 59, 66, 66, 59, 58, 67, 67, 58, 57, 68, 68, 57, 56, 69, 69, 56, 55, 70, 70, 55, 54, 71, 71, 54, 53, 72, 72, 53, 52, 73, 73, 52, 51, 74, 74, 51, 50, 75, 75, 50, 49, 76, 76, 49, 48, 77, 77, 48, 47, 78, 78, 47, 46, 79, 79, 46, 45, 80, 80, 45, 44, 81, 81, 44, 43, 82, 82, 43, 42, 83, 83, 42, 41, 84, 84, 41, 40, 85, 85, 40, 39, 86, 86, 39, 38, 87, 87, 38, 37, 88, 88, 37, 36, 89, 89, 36, 35, 90, 90, 35, 34, 91, 91, 34, 33, 92, 92, 33, 32, 93, 93, 32, 31, 94, 94, 31, 30, 95, 95, 30, 29, 96, 96, 29, 28, 97, 97, 28, 27, 98, 98, 27, 26, 99, 99, 26, 25, 100, 100, 25, 24, 101, 101, 24, 23, 102, 102, 23, 22, 103, 103, 22, 21, 104, 104, 21, 20, 105, 105, 20, 19, 106, 106, 19, 18, 107, 107, 18, 17, 108, 108, 17, 16, 109, 109, 16, 15, 110, 110, 15, 14, 111, 111, 14, 13, 112, 112, 13, 12, 113, 113, 12, 11, 114, 114, 11, 10, 115, 115, 10, 9, 116, 116, 9, 8, 117, 117, 8, 7, 118, 118, 7, 6, 119, 119, 6, 4, 63, 2, 5, 62, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.99990493, 0, 0.013783273), (0.99990493, 0, 0.013783273), (0.99990493, 0, 0.013783273), (0.99990493, 0, 0.013783273), (0.9991459, 0, 0.04132105), (0.9991459, 0, 0.04132105), (0.9991459, 0, 0.04132105), (0.9991459, 0, 0.04132105), (0.9976274, 0, 0.06884424), (0.9976274, 0, 0.06884424), (0.9976274, 0, 0.06884424), (0.9976274, 0, 0.06884424), (0.9953528, 0, 0.096295334), (0.9953528, 0, 0.096295334), (0.9953528, 0, 0.096295334), (0.9953528, 0, 0.096295334), (0.9923202, 0, 0.12369553), (0.9923202, 0, 0.12369553), (0.9923202, 0, 0.12369553), (0.9923202, 0, 0.12369553), (0.9885355, 0, 0.15098824), (0.9885355, 0, 0.15098824), (0.9885355, 0, 0.15098824), (0.9885355, 0, 0.15098824), (0.9839995, 0, 0.17817117), (0.9839995, 0, 0.17817117), (0.9839995, 0, 0.17817117), (0.9839995, 0, 0.17817117), (0.9787163, 0, 0.20521782), (0.9787163, 0, 0.20521782), (0.9787163, 0, 0.20521782), (0.9787163, 0, 0.20521782), (0.97269064, 0, 0.23210557), (0.97269064, 0, 0.23210557), (0.97269064, 0, 0.23210557), (0.97269064, 0, 0.23210557), (0.96592563, 0, 0.2588198), (0.96592563, 0, 0.2588198), (0.96592563, 0, 0.2588198), (0.96592563, 0, 0.2588198), (0.9584287, 0, 0.28533214), (0.9584287, 0, 0.28533214), (0.9584287, 0, 0.28533214), (0.9584287, 0, 0.28533214), (0.95019996, 0, 0.31164047), (0.95019996, 0, 0.31164047), (0.95019996, 0, 0.31164047), (0.95019996, 0, 0.31164047), (0.94125444, 0, 0.33769828), (0.94125444, 0, 0.33769828), (0.94125444, 0, 0.33769828), (0.94125444, 0, 0.33769828), (0.9315931, 0, 0.36350256), (0.9315931, 0, 0.36350256), (0.9315931, 0, 0.36350256), (0.9315931, 0, 0.36350256), (0.9212212, 0, 0.38903922), (0.9212212, 0, 0.38903922), (0.9212212, 0, 0.38903922), (0.9212212, 0, 0.38903922), (0.91015035, 0, 0.414278), (0.91015035, 0, 0.414278), (0.91015035, 0, 0.414278), (0.91015035, 0, 0.414278), (0.89838874, 0, 0.43920097), (0.89838874, 0, 0.43920097), (0.89838874, 0, 0.43920097), (0.89838874, 0, 0.43920097), (0.88595104, 0, 0.46377876), (0.88595104, 0, 0.46377876), (0.88595104, 0, 0.46377876), (0.88595104, 0, 0.46377876), (0.8728318, 0, 0.4880211), (0.8728318, 0, 0.4880211), (0.8728318, 0, 0.4880211), (0.8728318, 0, 0.4880211), (0.85905224, 0, 0.511888), (0.85905224, 0, 0.511888), (0.85905224, 0, 0.511888), (0.85905224, 0, 0.511888), (0.8446269, 0, 0.5353553), (0.8446269, 0, 0.5353553), (0.8446269, 0, 0.5353553), (0.8446269, 0, 0.5353553), (0.82954687, 0, 0.5584371), (0.82954687, 0, 0.5584371), (0.82954687, 0, 0.5584371), (0.82954687, 0, 0.5584371), (0.8138505, 0, 0.58107436), (0.8138505, 0, 0.58107436), (0.8138505, 0, 0.58107436), (0.8138505, 0, 0.58107436), (0.79752916, 0, 0.60328037), (0.79752916, 0, 0.60328037), (0.79752916, 0, 0.60328037), (0.79752916, 0, 0.60328037), (0.7806017, 0, 0.6250289), (0.7806017, 0, 0.6250289), (0.7806017, 0, 0.6250289), (0.7806017, 0, 0.6250289), (0.76308465, 0, 0.6462986), (0.76308465, 0, 0.6462986), (0.76308465, 0, 0.6462986), (0.76308465, 0, 0.6462986), (0.7449855, 0, 0.6670807), (0.7449855, 0, 0.6670807), (0.7449855, 0, 0.6670807), (0.7449855, 0, 0.6670807), (0.72632307, 0, 0.6873534), (0.72632307, 0, 0.6873534), (0.72632307, 0, 0.6873534), (0.72632307, 0, 0.6873534), (0.7071059, 0, 0.7071077), (0.7071059, 0, 0.7071077), (0.7071059, 0, 0.7071077), (0.7071059, 0, 0.7071077), (0.68735355, 0, 0.72632307), (0.68735355, 0, 0.72632307), (0.68735355, 0, 0.72632307), (0.68735355, 0, 0.72632307), (0.66707957, 0, 0.7449865), (0.66707957, 0, 0.7449865), (0.66707957, 0, 0.7449865), (0.66707957, 0, 0.7449865), (0.6463014, 0, 0.76308227), (0.6463014, 0, 0.76308227), (0.6463014, 0, 0.76308227), (0.6463014, 0, 0.76308227), (0.6250269, 0, 0.78060323), (0.6250269, 0, 0.78060323), (0.6250269, 0, 0.78060323), (0.6250269, 0, 0.78060323), (0.6032798, 0, 0.7975296), (0.6032798, 0, 0.7975296), (0.6032798, 0, 0.7975296), (0.6032798, 0, 0.7975296), (0.5810793, 0, 0.81384695), (0.5810793, 0, 0.81384695), (0.5810793, 0, 0.81384695), (0.5810793, 0, 0.81384695), (0.5584305, 0, 0.82955134), (0.5584305, 0, 0.82955134), (0.5584305, 0, 0.82955134), (0.5584305, 0, 0.82955134), (0.5353629, 0, 0.8446221), (0.5353629, 0, 0.8446221), (0.5353629, 0, 0.8446221), (0.5353629, 0, 0.8446221), (0.5118837, 0, 0.8590547), (0.5118837, 0, 0.8590547), (0.5118837, 0, 0.8590547), (0.5118837, 0, 0.8590547), (0.48801756, 0, 0.8728337), (0.48801756, 0, 0.8728337), (0.48801756, 0, 0.8728337), (0.48801756, 0, 0.8728337), (0.46378592, 0, 0.88594735), (0.46378592, 0, 0.88594735), (0.46378592, 0, 0.88594735), (0.46378592, 0, 0.88594735), (0.43919736, 0, 0.8983906), (0.43919736, 0, 0.8983906), (0.43919736, 0, 0.8983906), (0.43919736, 0, 0.8983906), (0.41427505, 0, 0.9101518), (0.41427505, 0, 0.9101518), (0.41427505, 0, 0.9101518), (0.41427505, 0, 0.9101518), (0.38903922, 0, 0.9212212), (0.38903922, 0, 0.9212212), (0.38903922, 0, 0.9212212), (0.38903922, 0, 0.9212212), (0.3635051, 0, 0.93159217), (0.3635051, 0, 0.93159217), (0.3635051, 0, 0.93159217), (0.3635051, 0, 0.93159217), (0.33770207, 0, 0.94125307), (0.33770207, 0, 0.94125307), (0.33770207, 0, 0.94125307), (0.33770207, 0, 0.94125307), (0.31163722, 0, 0.9502012), (0.31163722, 0, 0.9502012), (0.31163722, 0, 0.9502012), (0.31163722, 0, 0.9502012), (0.2853345, 0, 0.95842797), (0.2853345, 0, 0.95842797), (0.2853345, 0, 0.95842797), (0.2853345, 0, 0.95842797), (0.2588207, 0, 0.9659254), (0.2588207, 0, 0.9659254), (0.2588207, 0, 0.9659254), (0.2588207, 0, 0.9659254), (0.23210557, 0, 0.97269064), (0.23210557, 0, 0.97269064), (0.23210557, 0, 0.97269064), (0.23210557, 0, 0.97269064), (0.20521821, 0, 0.9787163), (0.20521821, 0, 0.9787163), (0.20521821, 0, 0.9787163), (0.20521821, 0, 0.9787163), (0.17816736, 0, 0.9840002), (0.17816736, 0, 0.9840002), (0.17816736, 0, 0.9840002), (0.17816736, 0, 0.9840002), (0.15098824, 0, 0.9885355), (0.15098824, 0, 0.9885355), (0.15098824, 0, 0.9885355), (0.15098824, 0, 0.9885355), (0.12369154, 0, 0.9923207), (0.12369154, 0, 0.9923207), (0.12369154, 0, 0.9923207), (0.12369154, 0, 0.9923207), (0.0963025, 0, 0.9953522), (0.0963025, 0, 0.9953522), (0.0963025, 0, 0.9953522), (0.0963025, 0, 0.9953522), (0.068840645, 0, 0.99762774), (0.068840645, 0, 0.99762774), (0.068840645, 0, 0.99762774), (0.068840645, 0, 0.99762774), (0.041324656, 0, 0.9991458), (0.041324656, 0, 0.9991458), (0.041324656, 0, 0.9991458), (0.041324656, 0, 0.9991458), (0.013779712, 0, 0.99990505), (0.013779712, 0, 0.99990505), (0.013779712, 0, 0.99990505), (0.013779712, 0, 0.99990505), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1, -1, 0), (1, 1, 0), (-1, -0.99999994, 2), (-1, 0.99999994, 2), (-0.70058465, -1, 0), (-1, -1, 0.29941535), (-0.7088348, -1, 0.00011369586), (-0.71707875, -1, 0.00045466423), (-0.72531015, -1, 0.0010226667), (-0.7335228, -1, 0.0018172562), (-0.7417104, -1, 0.0028378367), (-0.7498668, -1, 0.0040836334), (-0.7579858, -1, 0.0055536926), (-0.7660611, -1, 0.0072469413), (-0.7740868, -1, 0.009162039), (-0.78205657, -1, 0.011297554), (-0.78996456, -1, 0.013651848), (-0.79780465, -1, 0.016223162), (-0.8055709, -1, 0.01900953), (-0.81325746, -1, 0.022008806), (-0.8208584, -1, 0.025218755), (-0.82836807, -1, 0.028636932), (-0.8357807, -1, 0.032260746), (-0.8430906, -1, 0.036087424), (-0.8502923, -1, 0.040114045), (-0.8573804, -1, 0.0443376), (-0.8643493, -1, 0.04875484), (-0.87119395, -1, 0.05336246), (-0.87790895, -1, 0.058156908), (-0.88448936, -1, 0.063134566), (-0.8909301, -1, 0.068291664), (-0.8972263, -1, 0.07362427), (-0.9033731, -1, 0.07912831), (-0.909366, -1, 0.08479966), (-0.91520035, -1, 0.09063399), (-0.9208717, -1, 0.09662685), (-0.92637575, -1, 0.10277371), (-0.93170834, -1, 0.1090699), (-0.93686545, -1, 0.11551064), (-0.9418431, -1, 0.122091025), (-0.9466375, -1, 0.12880607), (-0.9512452, -1, 0.13565068), (-0.95566237, -1, 0.14261964), (-0.95988595, -1, 0.14970767), (-0.9639126, -1, 0.15690939), (-0.9677392, -1, 0.16421933), (-0.97136307, -1, 0.17163193), (-0.9747813, -1, 0.17914158), (-0.9779912, -1, 0.18674254), (-0.98099047, -1, 0.19442908), (-0.9837768, -1, 0.20219535), (-0.98634815, -1, 0.21003544), (-0.9887024, -1, 0.2179434), (-0.99083793, -1, 0.22591323), (-0.992753, -1, 0.23393887), (-0.9944463, -1, 0.24201424), (-0.99591637, -1, 0.25013322), (-0.99716216, -1, 0.25828958), (-0.9981828, -1, 0.2664772), (-0.9989773, -1, 0.27468982), (-0.99954534, -1, 0.28292122), (-0.9998863, -1, 0.29116514), (-1, 1, 0.29941535), (-0.70058465, 1, 0), (-0.9998863, 1, 0.29116514), (-0.99954534, 1, 0.28292122), (-0.9989773, 1, 0.27468982), (-0.9981828, 1, 0.2664772), (-0.99716216, 1, 0.25828958), (-0.99591637, 1, 0.25013322), (-0.9944463, 1, 0.24201424), (-0.992753, 1, 0.23393887), (-0.99083793, 1, 0.22591323), (-0.9887024, 1, 0.2179434), (-0.98634815, 1, 0.21003544), (-0.9837768, 1, 0.20219535), (-0.98099047, 1, 0.19442908), (-0.9779912, 1, 0.18674254), (-0.9747813, 1, 0.17914158), (-0.97136307, 1, 0.17163193), (-0.9677392, 1, 0.16421933), (-0.9639126, 1, 0.15690939), (-0.95988595, 1, 0.14970767), (-0.95566237, 1, 0.14261964), (-0.9512452, 1, 0.13565068), (-0.9466375, 1, 0.12880607), (-0.9418431, 1, 0.122091025), (-0.93686545, 1, 0.11551064), (-0.93170834, 1, 0.1090699), (-0.92637575, 1, 0.10277371), (-0.9208717, 1, 0.09662685), (-0.91520035, 1, 0.09063399), (-0.909366, 1, 0.08479966), (-0.9033731, 1, 0.07912831), (-0.8972263, 1, 0.07362427), (-0.8909301, 1, 0.068291664), (-0.88448936, 1, 0.063134566), (-0.87790895, 1, 0.058156908), (-0.87119395, 1, 0.05336246), (-0.8643493, 1, 0.04875484), (-0.8573804, 1, 0.0443376), (-0.8502923, 1, 0.040114045), (-0.8430906, 1, 0.036087424), (-0.8357807, 1, 0.032260746), (-0.82836807, 1, 0.028636932), (-0.8208584, 1, 0.025218755), (-0.81325746, 1, 0.022008806), (-0.8055709, 1, 0.01900953), (-0.79780465, 1, 0.016223162), (-0.78996456, 1, 0.013651848), (-0.78205657, 1, 0.011297554), (-0.7740868, 1, 0.009162039), (-0.7660611, 1, 0.0072469413), (-0.7579858, 1, 0.0055536926), (-0.7498668, 1, 0.0040836334), (-0.7417104, 1, 0.0028378367), (-0.7335228, 1, 0.0018172562), (-0.72531015, 1, 0.0010226667), (-0.71707875, 1, 0.00045466423), (-0.7088348, 1, 0.00011369586)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.14970767, 0), (1, 0), (1, 1), (0.14970767, 1), (0.8502923, 1), (0.8502923, 0), (0.85441744, 0), (0.85441744, 1), (0.85441744, 1), (0.85441744, 0), (0.8585394, 0), (0.8585394, 1), (0.8585394, 1), (0.8585394, 0), (0.8626551, 0), (0.8626551, 1), (0.8626551, 1), (0.8626551, 0), (0.8667614, 0), (0.8667614, 1), (0.8667614, 1), (0.8667614, 0), (0.8708552, 0), (0.8708552, 1), (0.8708552, 1), (0.8708552, 0), (0.87493336, 0), (0.87493336, 1), (0.87493336, 1), (0.87493336, 0), (0.87899286, 0), (0.87899286, 1), (0.87899286, 1), (0.87899286, 0), (0.88303053, 0), (0.88303053, 1), (0.88303053, 1), (0.88303053, 0), (0.88704336, 0), (0.88704336, 1), (0.88704336, 1), (0.88704336, 0), (0.8910283, 0), (0.8910283, 1), (0.8910283, 1), (0.8910283, 0), (0.8949823, 0), (0.8949823, 1), (0.8949823, 1), (0.8949823, 0), (0.8989023, 0), (0.8989023, 1), (0.8989023, 1), (0.8989023, 0), (0.9027855, 0), (0.9027855, 1), (0.9027855, 1), (0.9027855, 0), (0.9066287, 0), (0.9066287, 1), (0.9066287, 1), (0.9066287, 0), (0.91042924, 0), (0.91042924, 1), (0.91042924, 1), (0.91042924, 0), (0.91418403, 0), (0.91418403, 1), (0.91418403, 1), (0.91418403, 0), (0.9178903, 0), (0.9178903, 1), (0.9178903, 1), (0.9178903, 0), (0.9215453, 0), (0.9215453, 1), (0.9215453, 1), (0.9215453, 0), (0.92514616, 0), (0.92514616, 1), (0.92514616, 1), (0.92514616, 0), (0.9286902, 0), (0.9286902, 1), (0.9286902, 1), (0.9286902, 0), (0.9321747, 0), (0.9321747, 1), (0.9321747, 1), (0.9321747, 0), (0.93559694, 0), (0.93559694, 1), (0.93559694, 1), (0.93559694, 0), (0.9389545, 0), (0.9389545, 1), (0.9389545, 1), (0.9389545, 0), (0.94224465, 0), (0.94224465, 1), (0.94224465, 1), (0.94224465, 0), (0.945465, 0), (0.945465, 1), (0.945465, 1), (0.945465, 0), (0.94861317, 0), (0.94861317, 1), (0.94861317, 1), (0.94861317, 0), (0.95168656, 0), (0.95168656, 1), (0.95168656, 1), (0.95168656, 0), (1, 0), (1, 1), (0, 1), (0, 0), (0.045316994, 0), (0.045316994, 1), (0.045316994, 1), (0.045316994, 0), (0.04831344, 0), (0.04831344, 1), (0.04831344, 1), (0.04831344, 0), (0.051386863, 0), (0.051386833, 1), (0.051386833, 1), (0.051386863, 0), (0.054534942, 0), (0.054534912, 1), (0.054534912, 1), (0.054534942, 0), (0.05775532, 0), (0.05775535, 1), (0.05775535, 1), (0.05775532, 0), (0.061045527, 0), (0.061045527, 1), (0.061045527, 1), (0.061045527, 0), (0.06440303, 0), (0.06440306, 1), (0.06440306, 1), (0.06440303, 0), (0.06782535, 0), (0.06782532, 1), (0.06782532, 1), (0.06782535, 0), (0.071309805, 0), (0.071309805, 1), (0.071309805, 1), (0.071309805, 0), (0.07485384, 0), (0.07485384, 1), (0.07485384, 1), (0.07485384, 0), (0.0784547, 0), (0.07845473, 1), (0.07845473, 1), (0.0784547, 0), (0.08210966, 0), (0.08210969, 1), (0.08210969, 1), (0.08210966, 0), (0.085815966, 0), (0.085815966, 1), (0.085815966, 1), (0.085815966, 0), (0.08957079, 0), (0.08957076, 1), (0.08957076, 1), (0.08957079, 0), (0.09337127, 0), (0.09337127, 1), (0.09337127, 1), (0.09337127, 0), (0.09721455, 0), (0.09721458, 1), (0.09721458, 1), (0.09721455, 0), (0.10109767, 0), (0.1010977, 1), (0.1010977, 1), (0.10109767, 0), (0.10501772, 0), (0.10501772, 1), (0.10501772, 1), (0.10501772, 0), (0.108971715, 0), (0.108971715, 1), (0.108971715, 1), (0.108971715, 0), (0.11295661, 0), (0.11295664, 1), (0.11295664, 1), (0.11295661, 0), (0.11696944, 0), (0.116969466, 1), (0.116969466, 1), (0.11696944, 0), (0.121007115, 0), (0.121007085, 1), (0.121007085, 1), (0.121007115, 0), (0.12506661, 0), (0.12506664, 1), (0.12506664, 1), (0.12506661, 0), (0.12914479, 0), (0.12914479, 1), (0.12914479, 1), (0.12914479, 0), (0.13323861, 0), (0.13323861, 1), (0.13323861, 1), (0.13323861, 0), (0.13734493, 0), (0.13734496, 1), (0.13734496, 1), (0.13734493, 0), (0.14146063, 0), (0.14146066, 1), (0.14146066, 1), (0.14146063, 0), (0.14558259, 0), (0.14558256, 1), (0.14558256, 1), (0.14558259, 0), (0.14970767, 0), (0.14970767, 1), (0, 0), (0.8502923, 0), (0.8502923, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Cube"
    {
        matrix4d xformOp:transform = ( (-1.1270341873168945, -9.046461286743579e-7, 0, 0), (-0.0000036663464015873615, 4.5676398277282715, -2.697115064620448e-7, 0), (-4.6744216231574785e-15, 5.823529214410428e-9, 0.09862309694290161, 0), (-3.3887057304382324, -0.0015940843150019646, -2.6690895557403564, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Cube_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/Material_004>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -1, -1), (-1, -1, 1), (-1, 1, -1), (-1, 1, 1), (1, -1, -1), (1, -1, 1), (1, 1, -1), (1, 1, 1)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }
}

